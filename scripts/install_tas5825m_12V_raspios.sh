#!/bin/bash

set -o errexit

if [[ $EUID -ne 0 ]]; then
   echo "This script must be run as root (use sudo)" 1>&2
   exit 1
fi

set -e

echo "INSTALLING ALSA SETTINGS FOR TAS5825M AND TAS5825M INITIALIZATION SCRIPT..."

sed -i \
  -e "s/^dtparam=audio=on/#\0/" \
  -e "s/^#\(dtparam=i2s=on\)/\1/" \
  /boot/config.txt
sed -i \
  -e "s/^dtparam=i2c_arm=on/#\0/" \
  -e "s/^#\(dtparam=i2c_arm=on\)/\1/" \
  /boot/config.txt
grep -q "dtoverlay=i2s-mmap" /boot/config.txt || \
  echo "dtoverlay=i2s-mmap" >> /boot/config.txt
grep -q "dtoverlay=googlevoicehat-soundcard" /boot/config.txt || \
  echo "dtoverlay=googlevoicehat-soundcard" >> /boot/config.txt
grep -q "dtparam=i2s=on" /boot/config.txt || \
  echo "dtparam=i2s=on" >> /boot/config.txt

raspi-config nonint do_i2c 0

apt update
apt -y install python-smbus


# ALSA settings
cat <<'EOF' > /etc/asound.conf
options snd_rpi_googlemihat_soundcard index=0

pcm.spkvol {
    type            softvol
    slave.pcm       "dmix"
    control.name    "PCM"
    control.card    0
}

pcm.micboost {
    type            softvol
    slave.pcm       "dsnoop"
    control.name    "MIC"
    control.card    0
    min_dB      -10.0
    max_dB      18.0
}

pcm.asymed {
    type asym
    playback.pcm "spkvol"
    capture.pcm "micboost"
}

pcm.!default {
    type plug
    slave.pcm "asymed"
}

EOF

rm -f /home/pi/.asoundrc
rm -f /root/.asoundrc


# TAS5825M init script
cat <<'EOF' > /usr/bin/tas5825m_init.py
#!/usr/bin/env python

from smbus import SMBus
from time import sleep

bus = SMBus(1)

# PAGE 0x00, BOOK 0x00
bus.write_byte_data(0x4c, 0x00, 0x00)
bus.write_byte_data(0x4c, 0x7f, 0x00)

# Reset register and digital core
bus.write_byte_data(0x4c, 0x01, 0x11)
bus.write_byte_data(0x4c, 0x00, 0x00)
bus.write_byte_data(0x4c, 0x00, 0x00)
bus.write_byte_data(0x4c, 0x00, 0x00)
bus.write_byte_data(0x4c, 0x00, 0x00)
bus.write_byte_data(0x4c, 0x00, 0x00)
bus.write_byte_data(0x4c, 0x00, 0x00)
bus.write_byte_data(0x4c, 0x00, 0x00)

# PAGE 0x00, BOOK 0x00
bus.write_byte_data(0x4c, 0x00, 0x00)
bus.write_byte_data(0x4c, 0x7f, 0x00)

# Switch from deep sleep to Hi-z mode, keep mute enabled
bus.write_byte_data(0x4c, 0x03, 0x12)

# GPIO0, GPIO1 and GPIO2 as output
bus.write_byte_data(0x4c, 0x60, 0x07)
bus.write_byte_data(0x4c, 0x61, 0x02)
bus.write_byte_data(0x4c, 0x62, 0x02)
bus.write_byte_data(0x4c, 0x63, 0x02)

# GPIO0 = 1, GPIO1 = 0, GPIO2 = 1
#bus.write_byte_data(0x4c, 0x65, 0x05)
bus.write_byte_data(0x4c, 0x65, 0x00)

# ???
bus.write_byte_data(0x4c, 0x7f, 0x00)
bus.write_byte_data(0x4c, 0x7d, 0x11) # ????
bus.write_byte_data(0x4c, 0x7e, 0xff) # ????
bus.write_byte_data(0x4c, 0x00, 0x01) # Page 0x01
bus.write_byte_data(0x4c, 0x51, 0x05)
bus.write_byte_data(0x4c, 0x00, 0x02) # Page 0x02
bus.write_byte_data(0x4c, 0x19, 0xa0)
bus.write_byte_data(0x4c, 0x1d, 0x01)
bus.write_byte_data(0x4c, 0x00, 0x00) # Page 0x00
bus.write_byte_data(0x4c, 0x7f, 0x00) # Book 0x00
bus.write_byte_data(0x4c, 0x46, 0x01) # DSP_CTRL
bus.write_byte_data(0x4c, 0x00, 0x00)
bus.write_byte_data(0x4c, 0x02, 0x42) # 768kHz, BTL, Hybrid mode
bus.write_byte_data(0x4c, 0x53, 0x60) # 175kHz bandwidth
bus.write_byte_data(0x4c, 0x54, 0x10) # Analog gain of -8.0dB (11.74 Vpeak)
bus.write_byte_data(0x4c, 0x00, 0x00) # Page 0x00
bus.write_byte_data(0x4c, 0x7f, 0x00) # Book 0x00
bus.write_byte_data(0x4c, 0x03, 0x02) # Hiz, unmute

sleep(0.005)

bus.write_byte_data(0x4c, 0x00, 0x00) 
bus.write_byte_data(0x4c, 0x00, 0x00)
bus.write_byte_data(0x4c, 0x00, 0x00)
bus.write_byte_data(0x4c, 0x00, 0x00)
bus.write_byte_data(0x4c, 0x7f, 0x8c) # Book 0x8c
bus.write_byte_data(0x4c, 0x00, 0x06) # Page 0x06
bus.write_byte_data(0x4c, 0x38, 0x00)
bus.write_byte_data(0x4c, 0x39, 0x00)
bus.write_byte_data(0x4c, 0x3a, 0x04)
bus.write_byte_data(0x4c, 0x3b, 0x00)

# Tuning coeffs
bus.write_byte_data(0x4c, 0x00, 0x0b) # Page 0x0b
bus.write_byte_data(0x4c, 0x50, 0x00)
bus.write_byte_data(0x4c, 0x51, 0x20)
bus.write_byte_data(0x4c, 0x52, 0xc4)
bus.write_byte_data(0x4c, 0x53, 0x9c)
bus.write_byte_data(0x4c, 0x5c, 0x7f)
bus.write_byte_data(0x4c, 0x5d, 0xff)
bus.write_byte_data(0x4c, 0x5e, 0xff)
bus.write_byte_data(0x4c, 0x5f, 0xff)

# Book 0x8c
bus.write_byte_data(0x4c, 0x00, 0x00) # Page 0x00
bus.write_byte_data(0x4c, 0x7f, 0x8c) # Book 0x8c

bus.write_byte_data(0x4c, 0x00, 0x01) # Page 0x01
bus.write_byte_data(0x4c, 0x28, 0x40)
bus.write_byte_data(0x4c, 0x29, 0x00)
bus.write_byte_data(0x4c, 0x2a, 0x00)
bus.write_byte_data(0x4c, 0x2b, 0x00)

bus.write_byte_data(0x4c, 0x00, 0x0a) # Page 0x0a
bus.write_byte_data(0x4c, 0x64, 0x00)
bus.write_byte_data(0x4c, 0x65, 0x80)
bus.write_byte_data(0x4c, 0x66, 0x00)
bus.write_byte_data(0x4c, 0x67, 0x00)
bus.write_byte_data(0x4c, 0x68, 0x00)
bus.write_byte_data(0x4c, 0x69, 0x00)
bus.write_byte_data(0x4c, 0x6a, 0x00)
bus.write_byte_data(0x4c, 0x6b, 0x00)
bus.write_byte_data(0x4c, 0x6c, 0x00)
bus.write_byte_data(0x4c, 0x6d, 0x00)
bus.write_byte_data(0x4c, 0x6e, 0x00)
bus.write_byte_data(0x4c, 0x6f, 0x00)
bus.write_byte_data(0x4c, 0x70, 0x00)
bus.write_byte_data(0x4c, 0x71, 0x80)
bus.write_byte_data(0x4c, 0x72, 0x00)
bus.write_byte_data(0x4c, 0x73, 0x00)
bus.write_byte_data(0x4c, 0x74, 0x00)
bus.write_byte_data(0x4c, 0x75, 0x80)
bus.write_byte_data(0x4c, 0x76, 0x00)
bus.write_byte_data(0x4c, 0x77, 0x00)
bus.write_byte_data(0x4c, 0x78, 0x00)
bus.write_byte_data(0x4c, 0x79, 0x00)
bus.write_byte_data(0x4c, 0x7a, 0x00)
bus.write_byte_data(0x4c, 0x7b, 0x00)
bus.write_byte_data(0x4c, 0x7c, 0x00)
bus.write_byte_data(0x4c, 0x7d, 0x00)
bus.write_byte_data(0x4c, 0x7e, 0x00)
bus.write_byte_data(0x4c, 0x7f, 0x00)

bus.write_byte_data(0x4c, 0x00, 0x0b) # Page 0x0b
bus.write_byte_data(0x4c, 0x08, 0x00)
bus.write_byte_data(0x4c, 0x09, 0x80)
bus.write_byte_data(0x4c, 0x0a, 0x00)
bus.write_byte_data(0x4c, 0x0b, 0x00)

bus.write_byte_data(0x4c, 0x38, 0x02)
bus.write_byte_data(0x4c, 0x39, 0xa3)
bus.write_byte_data(0x4c, 0x3a, 0x9a)
bus.write_byte_data(0x4c, 0x3b, 0xcc)
bus.write_byte_data(0x4c, 0x3c, 0x00)
bus.write_byte_data(0x4c, 0x3d, 0x06)
bus.write_byte_data(0x4c, 0x3e, 0xd3)
bus.write_byte_data(0x4c, 0x3f, 0x72)

bus.write_byte_data(0x4c, 0x48, 0x04)
bus.write_byte_data(0x4c, 0x49, 0xc1)
bus.write_byte_data(0x4c, 0x4a, 0xff)
bus.write_byte_data(0x4c, 0x4b, 0x93)
bus.write_byte_data(0x4c, 0x4c, 0x01)
bus.write_byte_data(0x4c, 0x4d, 0x12)
bus.write_byte_data(0x4c, 0x4e, 0x6e)
bus.write_byte_data(0x4c, 0x4f, 0x98)

bus.write_byte_data(0x4c, 0x54, 0x7b)
bus.write_byte_data(0x4c, 0x55, 0x3e)
bus.write_byte_data(0x4c, 0x56, 0x00)
bus.write_byte_data(0x4c, 0x57, 0x6d)
bus.write_byte_data(0x4c, 0x58, 0x00)
bus.write_byte_data(0x4c, 0x59, 0x00)
bus.write_byte_data(0x4c, 0x5a, 0xae)
bus.write_byte_data(0x4c, 0x5b, 0xc3)

bus.write_byte_data(0x4c, 0x60, 0x08)
bus.write_byte_data(0x4c, 0x61, 0x13)
bus.write_byte_data(0x4c, 0x62, 0x85)
bus.write_byte_data(0x4c, 0x63, 0x62)
bus.write_byte_data(0x4c, 0x64, 0x00)
bus.write_byte_data(0x4c, 0x65, 0x80)
bus.write_byte_data(0x4c, 0x66, 0x00)
bus.write_byte_data(0x4c, 0x67, 0x00)

bus.write_byte_data(0x4c, 0x6c, 0x00)
bus.write_byte_data(0x4c, 0x6d, 0x78)
bus.write_byte_data(0x4c, 0x6e, 0xd6)
bus.write_byte_data(0x4c, 0x6f, 0xfd)
bus.write_byte_data(0x4c, 0x70, 0x00)
bus.write_byte_data(0x4c, 0x71, 0x08)
bus.write_byte_data(0x4c, 0x72, 0x13)
bus.write_byte_data(0x4c, 0x73, 0x85)

# Register Tuning
bus.write_byte_data(0x4c, 0x00, 0x00) # Page 0x00
bus.write_byte_data(0x4c, 0x7f, 0x00) # Book 0x00
bus.write_byte_data(0x4c, 0x30, 0x00) # SDOUT is the DSP output
bus.write_byte_data(0x4c, 0x4c, 0x30) # Digital volume 0dB
bus.write_byte_data(0x4c, 0x03, 0x03) # Play mode
bus.write_byte_data(0x4c, 0x00, 0x00) # Page 0x00
bus.write_byte_data(0x4c, 0x7f, 0x00) # Book 0x00
bus.write_byte_data(0x4c, 0x78, 0x80) # Clear analog fault

EOF
chmod a+x /usr/bin/tas5825m_init.py


# TAS5825M init service
cat <<'EOF' > /etc/systemd/system/tas5825m.service
[Unit]
Description=tas5825m Initialization

[Service]
Type=simple
ExecStart=/usr/bin/python /usr/bin/tas5825m_init.py

[Install]
WantedBy=multi-user.target

EOF

systemctl daemon-reload
systemctl enable tas5825m.service
systemctl start tas5825m.service

echo "INSTALL ALSA SETTINGS FOR TAS5825M AND TAS5825M INITIALIZATION SCRIPT DONE!"
echo "PLEASE REBOOT."
